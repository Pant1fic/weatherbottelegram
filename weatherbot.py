import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
import requests
import datetime
from dotenv import load_dotenv
import logging
import math

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ –∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥(–≤—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã)
TELEGRAM_TOKEN = ("YOUR_TELEGRAM_TOKEN") # Telegram —Ç–æ–∫–µ–Ω
OPENWEATHER_API_KEY = ("YOUR_OPENWEATHER_API_KEY") # API –¥–ª—è –ø–æ–≥–æ–¥—ã
AIRVISUAL_API_KEY = ("YOUR_AIRVISUAL_API_KEY")  # API –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏(—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
CITIES_PER_PAGE = 6

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏(–Ω–µ —Ç—Ä–æ–≥–∞—Ç—å)
CITIES = {
    "–ú–æ—Å–∫–≤–∞": {"lat": 55.7558, "lon": 37.6173},
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": {"lat": 59.9343, "lon": 30.3351},
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": {"lat": 55.0084, "lon": 82.9357},
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": {"lat": 56.8389, "lon": 60.6057},
    "–ö–∞–∑–∞–Ω—å": {"lat": 55.7961, "lon": 49.1064},
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": {"lat": 56.3269, "lon": 44.0065},
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": {"lat": 55.1644, "lon": 61.4368},
    "–°–∞–º–∞—Ä–∞": {"lat": 53.1959, "lon": 50.1002},
    "–û–º—Å–∫": {"lat": 54.9914, "lon": 73.3645},
    "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É": {"lat": 47.2357, "lon": 39.7015},
    "–£—Ñ–∞": {"lat": 54.7351, "lon": 55.9587},
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": {"lat": 56.0184, "lon": 92.8672},
    "–ü–µ—Ä–º—å": {"lat": 58.0105, "lon": 56.2294},
    "–í–æ—Ä–æ–Ω–µ–∂": {"lat": 51.6606, "lon": 39.2003},
    "–í–æ–ª–≥–æ–≥—Ä–∞–¥": {"lat": 48.7194, "lon": 44.5018},
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": {"lat": 45.0355, "lon": 38.9753},
    "–°–∞—Ä–∞—Ç–æ–≤": {"lat": 51.5336, "lon": 46.0342},
    "–¢—é–º–µ–Ω—å": {"lat": 57.1522, "lon": 65.5272},
    "–¢–æ–ª—å—è—Ç—Ç–∏": {"lat": 53.5078, "lon": 49.4204},
    "–ò–∂–µ–≤—Å–∫": {"lat": 56.8527, "lon": 53.2115},
    "–ë–∞—Ä–Ω–∞—É–ª": {"lat": 53.3561, "lon": 83.7646},
    "–£–ª—å—è–Ω–æ–≤—Å–∫": {"lat": 54.3142, "lon": 48.4031},
    "–ò—Ä–∫—É—Ç—Å–∫": {"lat": 52.2864, "lon": 104.2807},
    "–•–∞–±–∞—Ä–æ–≤—Å–∫": {"lat": 48.4802, "lon": 135.0719},
    "–Ø—Ä–æ—Å–ª–∞–≤–ª—å": {"lat": 57.6261, "lon": 39.8845},
    "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫": {"lat": 43.1155, "lon": 131.8855},
    "–ú–∞—Ö–∞—á–∫–∞–ª–∞": {"lat": 42.9849, "lon": 47.5046},
    "–¢–æ–º—Å–∫": {"lat": 56.4846, "lon": 84.9476},
    "–û—Ä–µ–Ω–±—É—Ä–≥": {"lat": 51.7682, "lon": 55.0970},
    "–ö–µ–º–µ—Ä–æ–≤–æ": {"lat": 55.3543, "lon": 86.0898},
    "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫": {"lat": 53.7865, "lon": 87.1552},
    "–†—è–∑–∞–Ω—å": {"lat": 54.6294, "lon": 39.7417},
    "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å": {"lat": 46.3479, "lon": 48.0336},
    "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã": {"lat": 55.7436, "lon": 52.3958},
    "–ü–µ–Ω–∑–∞": {"lat": 53.1950, "lon": 45.0183},
    "–õ–∏–ø–µ—Ü–∫": {"lat": 52.6088, "lon": 39.5992},
    "–ö–∏—Ä–æ–≤": {"lat": 58.6036, "lon": 49.6680},
    "–ß–µ–±–æ–∫—Å–∞—Ä—ã": {"lat": 56.1439, "lon": 47.2489},
    "–¢—É–ª–∞": {"lat": 54.1930, "lon": 37.6173},
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": {"lat": 54.7104, "lon": 20.4522},
    "–ë–∞–ª–∞—à–∏—Ö–∞": {"lat": 55.8094, "lon": 37.9581},
    "–ö—É—Ä—Å–∫": {"lat": 51.7304, "lon": 36.1926},
    "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å": {"lat": 45.0445, "lon": 41.9691},
    "–£–ª–∞–Ω-–£–¥—ç": {"lat": 51.8335, "lon": 107.5841},
    "–°–æ—á–∏": {"lat": 43.5855, "lon": 39.7231},
    "–ë—Ä—è–Ω—Å–∫": {"lat": 53.2436, "lon": 34.3634},
    "–°—É—Ä–≥—É—Ç": {"lat": 61.2540, "lon": 73.3962},
    "–í–ª–∞–¥–∏–º–∏—Ä": {"lat": 56.1290, "lon": 40.4070},
    "–ß–∏—Ç–∞": {"lat": 52.0339, "lon": 113.4994},
    "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫": {"lat": 64.5393, "lon": 40.5187},
    "–°–º–æ–ª–µ–Ω—Å–∫": {"lat": 54.7826, "lon": 32.0453},
    "–ö–∞–ª—É–≥–∞": {"lat": 54.5138, "lon": 36.2612},
    "–í–æ–ª–∂—Å–∫–∏–π": {"lat": 48.7939, "lon": 44.7736},
    "–ß–µ—Ä–µ–ø–æ–≤–µ—Ü": {"lat": 59.1265, "lon": 37.9092},
    "–û—Ä—ë–ª": {"lat": 52.9703, "lon": 36.0635},
    "–í–æ–ª–æ–≥–¥–∞": {"lat": 59.2205, "lon": 39.8916},
    "–°–∞—Ä–∞–Ω—Å–∫": {"lat": 54.1874, "lon": 45.1839},
    "–ú—É—Ä–º–∞–Ω—Å–∫": {"lat": 68.9707, "lon": 33.0749},
    "–Ø–∫—É—Ç—Å–∫": {"lat": 62.0278, "lon": 129.7315},
    "–ì—Ä–æ–∑–Ω—ã–π": {"lat": 43.3180, "lon": 45.6982},
    "–°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫": {"lat": 53.6306, "lon": 55.9306},
    "–ö–æ—Å—Ç—Ä–æ–º–∞": {"lat": 57.7677, "lon": 40.9264},
    "–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫": {"lat": 61.7849, "lon": 34.3469},
    "–ô–æ—à–∫–∞—Ä-–û–ª–∞": {"lat": 56.6344, "lon": 47.8999},
    "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫": {"lat": 44.7235, "lon": 37.7686},
    "–°—ã–∫—Ç—ã–≤–∫–∞—Ä": {"lat": 61.6688, "lon": 50.8364},
    "–ù–∞–ª—å—á–∏–∫": {"lat": 43.4853, "lon": 43.6071},
    "–®–∞—Ö—Ç—ã": {"lat": 47.7085, "lon": 40.2160},
    "–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫": {"lat": 60.9397, "lon": 76.5694},
    "–ë–∏–π—Å–∫": {"lat": 52.5414, "lon": 85.2196},
    "–û—Ä—Å–∫": {"lat": 51.2293, "lon": 58.4752},
    "–ê–Ω–≥–∞—Ä—Å–∫": {"lat": 52.5449, "lon": 103.8885},
    "–ö–æ—Ä–æ–ª—ë–≤": {"lat": 55.9162, "lon": 37.8545},
    "–õ—é–±–µ—Ä—Ü—ã": {"lat": 55.6814, "lon": 37.8935},
    "–ú—ã—Ç–∏—â–∏": {"lat": 55.9104, "lon": 37.7366},
    "–ü—Ä–æ–∫–æ–ø—å–µ–≤—Å–∫": {"lat": 53.8954, "lon": 86.7447},
    "–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫": {"lat": 50.2907, "lon": 127.5272},
    "–°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª": {"lat": 51.2967, "lon": 37.8417},
    "–ó–ª–∞—Ç–æ—É—Å—Ç": {"lat": 55.1711, "lon": 59.6728},
    "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å": {"lat": 55.7842, "lon": 38.4534},
    "–ú–∏–∞—Å—Å": {"lat": 55.0474, "lon": 60.1077},
    "–ë–µ—Ä–¥—Å–∫": {"lat": 54.7586, "lon": 83.0926},
    "–ù–∞—Ö–æ–¥–∫–∞": {"lat": 42.8240, "lon": 132.8928},
    "–†—É–±—Ü–æ–≤—Å–∫": {"lat": 51.5147, "lon": 81.2061},
    "–ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫": {"lat": 54.9014, "lon": 52.2973},
    "–ö–æ–≤—Ä–æ–≤": {"lat": 56.3575, "lon": 41.3170},
    "–ö–æ–ª–æ–º–Ω–∞": {"lat": 55.0794, "lon": 38.7783},
    "–ú–∞–π–∫–æ–ø": {"lat": 44.6054, "lon": 40.1005},
    "–ü—è—Ç–∏–≥–æ—Ä—Å–∫": {"lat": 44.0425, "lon": 43.0584},
    "–û–¥–∏–Ω—Ü–æ–≤–æ": {"lat": 55.6784, "lon": 37.2785},
    "–ö–æ–ø–µ–π—Å–∫": {"lat": 55.1168, "lon": 61.6256},
    "–•–∏–º–∫–∏": {"lat": 55.8970, "lon": 37.4297},
    "–°–µ—Ä–ø—É—Ö–æ–≤": {"lat": 54.9139, "lon": 37.4117},
    "–ù–æ–≤–æ—á–µ–±–æ–∫—Å–∞—Ä—Å–∫": {"lat": 56.1214, "lon": 47.4925},
    "–ù–µ—Ñ—Ç–µ—é–≥–∞–Ω—Å–∫": {"lat": 61.0998, "lon": 72.6035},
    "–î–∏–º–∏—Ç—Ä–æ–≤–≥—Ä–∞–¥": {"lat": 54.2376, "lon": 49.5896},
    "–ù–∞–∑—Ä–∞–Ω—å": {"lat": 43.2265, "lon": 44.7656},
    "–ö–∞–º–µ–Ω—Å–∫-–£—Ä–∞–ª—å—Å–∫–∏–π": {"lat": 56.4149, "lon": 61.9189},
    "–û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ": {"lat": 55.8067, "lon": 38.9618},
    "–î–µ—Ä–±–µ–Ω—Ç": {"lat": 42.0674, "lon": 48.2890},
    "–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫": {"lat": 44.6337, "lon": 41.9443},
    "–ö—ã–∑—ã–ª": {"lat": 51.7191, "lon": 94.4378},
    "–û–±–Ω–∏–Ω—Å–∫": {"lat": 55.0944, "lon": 36.6122},
    "–ï–ª–µ—Ü": {"lat": 52.6207, "lon": 38.5030},
    "–ë–∞—Ç–∞–π—Å–∫": {"lat": 47.1396, "lon": 39.7518},
    "–°–µ–≤–µ—Ä–æ–¥–≤–∏–Ω—Å–∫": {"lat": 64.5582, "lon": 39.8296},
    "–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫": {"lat": 54.0333, "lon": 38.2666},
    "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π": {"lat": 55.7504, "lon": 38.0042},
    "–°–µ—Ä–≥–∏–µ–≤ –ü–æ—Å–∞–¥": {"lat": 56.3100, "lon": 38.1326},
    "–ê—Ä–∑–∞–º–∞—Å": {"lat": 55.3875, "lon": 43.8144},
    "–≠–ª–∏—Å—Ç–∞": {"lat": 46.3078, "lon": 44.2558},
    "–ù–æ–≤–æ—à–∞—Ö—Ç–∏–Ω—Å–∫": {"lat": 47.7579, "lon": 39.9364},
    "–ë–∞–ª–∞–∫–æ–≤–æ": {"lat": 52.0278, "lon": 47.8007},
    "–ù–æ–≥–∏–Ω—Å–∫": {"lat": 55.8525, "lon": 38.4388},
    "–©—ë–ª–∫–æ–≤–æ": {"lat": 55.9214, "lon": 37.9978},
    "–ú–µ–∂–¥—É—Ä–µ—á–µ–Ω—Å–∫": {"lat": 53.6866, "lon": 88.0704},
    "–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫": {"lat": 43.9052, "lon": 42.7168},
    "–ï—Å—Å–µ–Ω—Ç—É–∫–∏": {"lat": 44.0444, "lon": 42.8649},
    "–†–∞–º–µ–Ω—Å–∫–æ–µ": {"lat": 55.5704, "lon": 38.2300},
    "–î–æ–º–æ–¥–µ–¥–æ–≤–æ": {"lat": 55.4366, "lon": 37.7666},
    "–ñ—É–∫–æ–≤—Å–∫–∏–π": {"lat": 55.5991, "lon": 38.1163},
    "–†–µ—É—Ç–æ–≤": {"lat": 55.7585, "lon": 37.8616},
    "–ù–∞–∑—Ä–∞–Ω–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω": {"lat": 43.2000, "lon": 44.7667},
    "–ü—É—à–∫–∏–Ω–æ": {"lat": 56.0106, "lon": 37.8473}
}
#–£—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞
AQI_LEVELS = {
    1: {"label": "–û—Ç–ª–∏—á–Ω–æ", "emoji": "üòä", "description": "–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–º"},
    2: {"label": "–•–æ—Ä–æ—à–æ", "emoji": "üôÇ", "description": "–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ"},
    3: {"label": "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", "emoji": "üòê", "description": "–ú–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ª—é–¥–µ–π"},
    4: {"label": "–ü–ª–æ—Ö–æ", "emoji": "üò∑", "description": "–ú–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –≤—Å–µ—Ö"},
    5: {"label": "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ", "emoji": "‚ö†Ô∏è", "description": "–û–ø–∞—Å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –≤—Å–µ—Ö"},
}

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
#–∫–Ω–æ–ø–∫–∏
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", callback_data="current"),
         InlineKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π", callback_data="forecast")],
        [InlineKeyboardButton("üå´ –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞", callback_data="air_quality"),
         InlineKeyboardButton("üèô –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city")],
        [InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites"),
         InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
    ]
    return InlineKeyboardMarkup(keyboard)

def cities_keyboard(user_id, page=0):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    keyboard = []
    city_list = list(CITIES.keys())
    total_pages = math.ceil(len(city_list) / CITIES_PER_PAGE)
    
    start_idx = page * CITIES_PER_PAGE
    end_idx = start_idx + CITIES_PER_PAGE
    page_cities = city_list[start_idx:end_idx]
    
    for city in page_cities:
        row = [InlineKeyboardButton(city, callback_data=f"city_{city}")]
        if city not in user_data.get(user_id, {}).get("favorites", []):
            row.append(InlineKeyboardButton("‚≠ê", callback_data=f"add_fav_{city}"))
        keyboard.append(row)
    
    navigation = []
    if page > 0:
        navigation.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_page_{page}"))
    if page < total_pages - 1:
        navigation.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"next_page_{page}"))
    
    if navigation:
        keyboard.append(navigation)
    
    keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")])
    
    return InlineKeyboardMarkup(keyboard)

def get_day_name(date):
    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    return days[date.weekday()]

def get_weather_emoji(icon_code):
    icons = {
        "01": "‚òÄÔ∏è", "02": "‚õÖÔ∏è", "03": "‚òÅÔ∏è", "04": "‚òÅÔ∏è",
        "09": "üåß", "10": "üå¶", "11": "‚õà", "13": "‚ùÑÔ∏è", "50": "üå´"
    }
    return icons.get(icon_code[:2], "üå§")

async def get_weather_data(lat, lon):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ API OpenWeather"""
    try:
        url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {e}")
        return None

async def get_air_quality(lat, lon):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ —á–µ—Ä–µ–∑ AirVisual API"""
    try:
        url = f"http://api.airvisual.com/v2/nearest_city?lat={lat}&lon={lon}&key={AIRVISUAL_API_KEY}"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if 'data' not in data or 'current' not in data['data'] or 'pollution' not in data['data']['current']:
            logger.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AirVisual API")
            return None
            
        return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞: {e}")
        return None

async def send_current_weather(query, city, lat, lon):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã"""
    weather_data = await get_weather_data(lat, lon)
    
    if not weather_data or 'list' not in weather_data or 'city' not in weather_data:
        await query.edit_message_text(
            text=" –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ",
            reply_markup=main_menu_keyboard()
        )
        return
    
    current = weather_data['list'][0]
    temp = current['main']['temp']
    feels_like = current['main']['feels_like']
    humidity = current['main']['humidity']
    pressure = current['main']['pressure']
    wind_speed = current['wind']['speed']
    description = current['weather'][0]['description']
    icon = current['weather'][0]['icon']
    
    sunrise = datetime.datetime.fromtimestamp(weather_data['city']['sunrise']).strftime('%H:%M')
    sunset = datetime.datetime.fromtimestamp(weather_data['city']['sunset']).strftime('%H:%M')
    
    message = (
        f" <b>–ü–æ–≥–æ–¥–∞ –≤ {city}</b>\n\n"
        f"{get_weather_emoji(icon)} {description.capitalize()}\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp:.1f}¬∞C</b> (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like:.1f}¬∞C)\n"
        f" –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f" –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
        f" –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n\n"
        f" –í–æ—Å—Ö–æ–¥: {sunrise}\n"
        f" –ó–∞–∫–∞—Ç: {sunset}\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.now().strftime('%H:%M %d.%m.%Y')}</i>"
    )
    
    await query.edit_message_text(
        text=message,
        parse_mode="HTML",
        reply_markup=main_menu_keyboard()
    )

async def send_weather_forecast(query, city, lat, lon):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π"""
    weather_data = await get_weather_data(lat, lon)
    
    if not weather_data or 'list' not in weather_data:
        await query.edit_message_text(
            text=" –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã",
            reply_markup=main_menu_keyboard()
        )
        return
    
    message = f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city} –Ω–∞ 5 –¥–Ω–µ–π</b>\n\n"
    
    forecasts = {}
    for forecast in weather_data['list']:
        date = datetime.datetime.fromtimestamp(forecast['dt']).strftime('%d.%m')
        if date not in forecasts:
            forecasts[date] = []
        forecasts[date].append(forecast)
    
    for date, day_forecasts in forecasts.items():
        day_name = get_day_name(datetime.datetime.fromtimestamp(day_forecasts[0]['dt']))
        temp_min = min(f['main']['temp_min'] for f in day_forecasts)
        temp_max = max(f['main']['temp_max'] for f in day_forecasts)
        description = day_forecasts[0]['weather'][0]['description']
        icon = day_forecasts[0]['weather'][0]['icon']
        
        message += (
            f"\n<b>{day_name}, {date}</b>\n"
            f"{get_weather_emoji(icon)} {description.capitalize()}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç {temp_min:.1f}¬∞C –¥–æ {temp_max:.1f}¬∞C\n"
        )
    
    message += f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.now().strftime('%H:%M %d.%m.%Y')}</i>"
    
    await query.edit_message_text(
        text=message,
        parse_mode="HTML",
        reply_markup=main_menu_keyboard()
    )

async def send_air_quality(query, city, lat, lon):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ (—Ç–æ–ª—å–∫–æ AQI)"""
    air_data = await get_air_quality(lat, lon)
    
    if not air_data or 'data' not in air_data or 'current' not in air_data['data'] or 'pollution' not in air_data['data']['current']:
        await query.edit_message_text(
            text=" –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞",
            reply_markup=main_menu_keyboard()
        )
        return
    
    pollution = air_data['data']['current']['pollution']
    aqi = pollution.get('aqius', 0)
    level = AQI_LEVELS.get(min(max(1, (aqi // 50) + 1), 5), AQI_LEVELS[5])
    
    message = (
        f"üå´ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ {city}</b>\n\n"
        f"{level['emoji']} <b>–ò–Ω–¥–µ–∫—Å AQI: {aqi} ({level['label']})</b>\n"
        f"{level['description']}\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.now().strftime('%H:%M %d.%m.%Y')}</i>"
    )
    
    await query.edit_message_text(
        text=message,
        parse_mode="HTML",
        reply_markup=main_menu_keyboard()
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_data[user_id] = {"city": "–ú–æ—Å–∫–≤–∞", "page": 0, "favorites": []}
    
    await update.message.reply_text(
        "üå§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if user_id not in user_data:
        user_data[user_id] = {"city": "–ö–µ–º–µ—Ä–æ–≤–æ", "page": 0, "favorites": []}
    
    city = user_data[user_id]["city"]
    lat = CITIES[city]["lat"]
    lon = CITIES[city]["lon"]
    
    if data == "current":
        await send_current_weather(query, city, lat, lon)
    elif data == "forecast":
        await send_weather_forecast(query, city, lat, lon)
    elif data == "air_quality":
        await send_air_quality(query, city, lat, lon)
    elif data == "change_city":
        user_data[user_id]["page"] = 0
        await query.edit_message_text(
            text="üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=cities_keyboard(user_id)
        )
    elif data.startswith("city_"):
        selected_city = data[5:]
        user_data[user_id]["city"] = selected_city
        await query.edit_message_text(
            text=f"üåÜ –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {selected_city}",
            reply_markup=main_menu_keyboard()
        )
    elif data.startswith("prev_page_"):
        page = int(data[10:]) - 1
        user_data[user_id]["page"] = page
        await query.edit_message_text(
            text="üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=cities_keyboard(user_id, page)
        )
    elif data.startswith("next_page_"):
        page = int(data[10:]) + 1
        user_data[user_id]["page"] = page
        await query.edit_message_text(
            text="üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=cities_keyboard(user_id, page)
        )
    elif data == "back":
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )
    elif data == "refresh":
        await query.edit_message_text(
            text="üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...",
            reply_markup=main_menu_keyboard(),
        )
        await send_current_weather(query, city, lat, lon)
    elif data == "favorites":
        await show_favorites_menu(query)
    elif data.startswith("add_fav_"):
        city_to_add = data[8:]
        await add_to_favorites(query, city_to_add)
    elif data.startswith("remove_fav_"):
        city_to_remove = data[11:]
        await remove_from_favorites(query, city_to_remove)

async def show_favorites_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    user_id = query.from_user.id
    favorites = user_data.get(user_id, {}).get("favorites", [])
    
    if not favorites:
        await query.edit_message_text(
            text="‚≠ê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="change_city")],
                [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
            ])
        )
    else:
        keyboard = []
        for city in favorites:
            keyboard.append([InlineKeyboardButton(city, callback_data=f"city_{city}")])
        
        keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")])
        
        await query.edit_message_text(
            text="‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def add_to_favorites(query, city):
    """–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    user_id = query.from_user.id
    
    if user_id not in user_data:
        user_data[user_id] = {"favorites": []}
    elif "favorites" not in user_data[user_id]:
        user_data[user_id]["favorites"] = []
    
    if city not in user_data[user_id]["favorites"]:
        user_data[user_id]["favorites"].append(city)
        await query.answer(f"–ì–æ—Ä–æ–¥ {city} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    else:
        await query.answer("–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
    
    await show_favorites_menu(query)

async def remove_from_favorites(query, city):
    """–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    user_id = query.from_user.id
    
    if user_id in user_data and "favorites" in user_data[user_id]:
        if city in user_data[user_id]["favorites"]:
            user_data[user_id]["favorites"].remove(city)
            await query.answer(f"–ì–æ—Ä–æ–¥ {city} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
    
    await show_favorites_menu(query)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_button))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
